//
// Created by intellij-pest on 2025-04-14
// grammar
// Author: wspeirs
//

WHITESPACE = _{ (" ")+ | "\t" | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | (!"//" ~ ANY)* ~ "//" ~ (!NEWLINE ~ ANY)* ~ "\n" }

identifier_char = _{ ASCII_ALPHANUMERIC | "_" }
identifier      = @{ (ASCII_ALPHA) ~ identifier_char* }  // TODO: we want to allow a variable to start with an _, so it might be easier to change this, then enforce in the type-checker?
type_name       = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHA* }  // TODO: all the built-in types

true_literal    = @{ ("T"|"t") ~ "rue" }
false_literal   = @{ ("F"|"f") ~ "alse" }
boolean_literal =  { true_literal | false_literal }
integer_literal =  { ASCII_DIGIT ~ ASCII_DIGIT* }
float_literal   =  { ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
string_literal  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number          =  { float_literal | integer_literal }
literal         =  { string_literal | number | boolean_literal }

visibility = { "pub" | "priv" }

generic_types = { "<" ~ type_name ~ ("," ~ type_name)* ~ ">" }
lang_type     = { type_name ~ generic_types? }  // can't just call it "type" as that's a keyword in Rust :-)

binary_operator   = { "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" }
comparator        = { ">=" | "<=" | ">" | "<" | "==" | "!=" }
boolean_operator  = { "and" | "AND" | "&&" | "or" | "OR" | "||" }
binary_assignment = { "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" }

numeric_negation = { "-" ~ expression }
binary_negation  = { "!" ~ expression }
logic_negation   = { ("not" | "NOT") ~ expression }

operator_expression = {
      numeric_negation
    | binary_negation
    | logic_negation
    | (primary_expression ~ "?")  // error_propagation_expression
    | (primary_expression ~ binary_assignment ~ blockless_expression)  // compound_assignment_expression
    | (primary_expression ~ binary_operator ~ blockless_expression)  // arithmetic_or_logical_expression
    | (primary_expression ~ comparator ~ blockless_expression)  // comparison_expression
    | (primary_expression ~ boolean_operator ~ blockless_expression)  // lazy_boolean_expression
    | (primary_expression ~ "=" ~ blockless_expression)  // assignment_expression
}

return_expression = { "return" ~ expression }

range_to_inclusive_expr = { "..=" ~ expression }
range_inclusive_expr    = { primary_expression ~ "..=" ~ expression }
range_expr              = { primary_expression ~ ".." ~ expression }
range_from_expr         = { primary_expression ~ ".." }
range_to_expr           = { ".." ~ expression }
range_full_expr         = { ".." }
range_expression = {
      range_to_inclusive_expr
    | range_inclusive_expr
    | range_expr
    | range_from_expr
    | range_to_expr
    | range_full_expr
}

break_expression = { "break" ~ expression }

continue_expression = { "continue" }

field_expression = { primary_expression ~ "." ~ identifier }

method_call_expression = { primary_expression ~ "." ~ identifier ~ generic_types? ~ "(" ~ call_params? ~ ")" }

call_params     = { blockless_expression ~ ("," ~ blockless_expression)* }
call_expression = { identifier ~ "(" ~ call_params? ~ ")" }

tuple_indexing_expression = { primary_expression ~ "." ~ integer_literal }  // do we also support array notation for tuples?
tuple_expression = { "(" ~ blockless_expression ~ ("," ~ blockless_expression)* ~ ")" }

index_expression = { primary_expression ~ "[" ~ blockless_expression ~ "]" }

array_element    = { (blockless_expression ~ ("," ~ blockless_expression)* ~ ","?) | (blockless_expression ~ ";" ~ blockless_expression) }
array_expression = { "[" ~ array_element? ~ "]" }

grouped_expression = { "(" ~ blockless_expression ~ ")" }

let_statement = { "let" ~ identifier ~ (":" ~ lang_type)? ~ ("=" ~ expression ~ ("else" ~ statement_block)?)?}

implementation = { "impl" ~ generic_types ~ lang_type ~ "{" ~ (constant_item | function) ~ "}" }

trait_item = { constant_item | function_signature | function }
lang_trait = { "trait" ~ identifier ~ generic_types? ~ "{" ~ trait_item+ ~ "}" }

constant_item = { "const" ~ identifier ~ ":" ~ type_name ~ "=" ~ expression }

enum_item   = { identifier ~ ("(" ~ lang_type ~ ("," ~ lang_type)* ~ ")") | ("{" ~ field+ ~ "}") }  // NOTE: if field changes, this needs to be updated
enumeration = { "enum" ~ identifier ~ "{" ~ enum_item ~ ("," ~ enum_item)* }

record = { "record" ~ type_name ~ "(" ~ field+ ~ ")" ~ "{" ~ (visibility ~ field)* ~ function* ~ "}" }

field = { identifier ~ ":" ~ lang_type } // TODO: default params, and lambdas?
class = { "class" ~ type_name ~ "{" ~ (visibility ~ field)+ ~ function+ ~ "}" } // TODO: constructor, destructor

return_type        = { ("(" ~ lang_type ~ ("," ~ lang_type)+ ~ ")") | lang_type }  // note: can't have a single-item tuple here
function_params    = { "self"? ~ (identifier ~ ":" ~ type_name)? ~ ("," ~ identifier ~ ":" ~ type_name)* }  // move keyword, references?
function_signature = { ("fun" | "fn" | "def") ~ identifier ~ generic_types? ~ "(" ~ function_params ~ ")" ~ ("->" ~ lang_type)? }
function           = { visibility ~ function_signature ~ (statement_block | ";") }

use_declaration = { "use" ~ identifier ~ ("::" ~ identifier)* ~ ("as" ~ identifier)? }

item = {
      use_declaration
    | function
//     | type_alias
    | class
    | record
    | enumeration
//     | union
    | constant_item
//     | static_item
    | lang_trait
    | implementation
}

primary_expression = {
      literal
    | grouped_expression
    | array_expression
    | tuple_expression
    | call_expression
    | continue_expression
    | break_expression
    | return_expression
}

blockless_expression = {
      primary_expression
    | operator_expression
    | index_expression
    | tuple_indexing_expression
//     | class_expression  // TODO
//     | record_expression  // TODO
    | method_call_expression
    | field_expression
//     | closure_expression  // TODO
    | range_expression
}

while_expression = { "while" ~ blockless_expression ~ block_expression }
if_expression    = { "if" ~ blockless_expression ~ block_expression ~ (("elif" | "else" ~ "if") ~ block_expression)* ~ ("else" ~ block_expression)? }

block_expression = {
      statement_block
    | while_expression
//     | while_let_expression  // punt for now
    | if_expression
//     | if_let_expression  // punt for now
//     | match_expression   // punt for now
}

statement_block = { "{" ~ statements ~ "}" }

expression = { blockless_expression | block_expression }
expression_statement = { (blockless_expression ~ ";") | (block_expression ~ ";"?)}

statement = {
      let_statement
    | expression_statement
    | ";"
}

statements = { blockless_expression | (statement+ ~ blockless_expression) }


// could do these w/type checking
main_args = { identifier ~ ":" ~ "List" ~ "<" ~ "String" ~ ">" }
main_env = { identifier ~ ":" ~ "Map" ~ "<" ~ "String" ~ "," ~ "String" ~ ">" }
main_result = {
    "isize" |
    "Result" ~ "<" ~ "isize" ~ "," ~ "isize" ~ ">"
}

main = {
    "main" ~ "(" ~ main_args? ~ ("," ~ main_env)? ~ ")" ~ ("->" ~ main_result)?
}

// for now, a program is _just_ a main function
file = { SOI ~ item* ~ main ~ "{" ~ statement+ ~ "}" ~ EOI }


